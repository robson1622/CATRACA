
//    func downloadOfflineMap() async throws -> MGLOfflinePack {
//        return try await withCheckedThrowingContinuation { continuation in
//            let mapTilerKey = getMapTilerkey()
//            validateKey(mapTilerKey)
//
//            let styleURL = URL(string: "https://api.maptiler.com/maps/streets/style.json?key=\(mapTilerKey)")
//
//            // Define o centro e os limites do mapa
//            let center = CLLocationCoordinate2D(latitude: locationManager.userLocation?.latitude ?? 0, longitude: locationManager.userLocation?.longitude ?? 0)
//            let bounds = MGLCoordinateBounds(
//                sw: CLLocationCoordinate2D(latitude: center.latitude - 0.05, longitude: center.longitude - 0.05),
//                ne: CLLocationCoordinate2D(latitude: center.latitude + 0.05, longitude: center.longitude + 0.05)
//            )
//
//            let fromZoomLevel = zoom - 2
//            let toZoomLevel = zoom
//
//            let region = MGLTilePyramidOfflineRegion(styleURL: styleURL, bounds: bounds, fromZoomLevel: fromZoomLevel, toZoomLevel: toZoomLevel)
//
//            let userInfo = ["name": "Mapa da Região"]
//            let context = try? JSONSerialization.data(withJSONObject: userInfo, options: [])
//
//            // Inicia o download do mapa offline
//            MGLOfflineStorage.shared.addPack(for: region, withContext: context!) { pack, error in
//                if let error = error {
//                    continuation.resume(throwing: error) // Encerra com erro se falhar
//                    return
//                }
//                guard let pack = pack else {
//                    continuation.resume(throwing: NSError(domain: "DownloadError", code: -1, userInfo: [NSLocalizedDescriptionKey: "Falha ao inicializar o pacote offline"]))
//                    return
//                }
//                pack.resume() // Inicia o download do pack offline
//
//                // Monitorando progresso do download
//                NotificationCenter.default.addObserver(
//                    forName: NSNotification.Name.MGLOfflinePackProgressChanged,
//                    object: nil,
//                    queue: .main
//                ) { notification in
//                    if let updatedPack = notification.object as? MGLOfflinePack, updatedPack == pack {
//                        let progress = Float(updatedPack.progress.countOfResourcesCompleted) / Float(updatedPack.progress.countOfResourcesExpected)
//                        print("Progresso: \(progress * 100)% concluído")
//
//                        // Verifica se o download está completo
//                        if updatedPack.progress.countOfResourcesCompleted == updatedPack.progress.countOfResourcesExpected {
//                            NotificationCenter.default.removeObserver(self, name: NSNotification.Name.MGLOfflinePackProgressChanged, object: nil)
//                            continuation.resume(returning: updatedPack) // Retorna o pack ao final do download
//                        }
//                    }
//                }
//            }
//        }
//    }

    func downloadOfflineMap() async throws -> URL {
        return try await withCheckedThrowingContinuation { continuation in
            let mapTilerKey = getMapTilerkey()
            validateKey(mapTilerKey)
            
            let styleURL = URL(string: "https://api.maptiler.com/maps/streets/style.json?key=\(mapTilerKey)")
            
            // Define o centro e os limites do mapa
            let center = CLLocationCoordinate2D(latitude: locationManager.userLocation?.latitude ?? 0, longitude: locationManager.userLocation?.longitude ?? 0)
            let bounds = MGLCoordinateBounds(
                sw: CLLocationCoordinate2D(latitude: center.latitude - 0.05, longitude: center.longitude - 0.05),
                ne: CLLocationCoordinate2D(latitude: center.latitude + 0.05, longitude: center.longitude + 0.05)
            )
            
            let fromZoomLevel = zoom - 2
            let toZoomLevel = zoom
            
            let region = MGLTilePyramidOfflineRegion(styleURL: styleURL, bounds: bounds, fromZoomLevel: fromZoomLevel, toZoomLevel: toZoomLevel)
            
            let userInfo = ["name": "Mapa da Região"]
            let context = try? JSONSerialization.data(withJSONObject: userInfo, options: [])
            
            // Para garantir que `continuation` seja chamado apenas uma vez
            var hasResumed = false
            
            // Inicia o download do mapa offline
            MGLOfflineStorage.shared.addPack(for: region, withContext: context!) { pack, error in
                if let error = error {
                    if !hasResumed {
                        hasResumed = true
                        continuation.resume(throwing: error) // Encerra com erro se falhar
                    }
                    return
                }
                guard let pack = pack else {
                    if !hasResumed {
                        hasResumed = true
                        continuation.resume(throwing: NSError(domain: "DownloadError", code: -1, userInfo: [NSLocalizedDescriptionKey: "Falha ao inicializar o pacote offline"]))
                    }
                    return
                }
                pack.resume() // Inicia o download do pack offline
                
                // Monitorando progresso do download
                NotificationCenter.default.addObserver(
                    forName: NSNotification.Name.MGLOfflinePackProgressChanged,
                    object: nil,
                    queue: .main
                ) { notification in
                    if let updatedPack = notification.object as? MGLOfflinePack, updatedPack == pack {
                        let progress = Float(updatedPack.progress.countOfResourcesCompleted) / Float(updatedPack.progress.countOfResourcesExpected)
                        print("Progresso: \(progress * 100)% concluído")
                        
                        // Verifica se o download está completo
                        if updatedPack.progress.countOfResourcesCompleted == updatedPack.progress.countOfResourcesExpected {
                            NotificationCenter.default.removeObserver(self, name: NSNotification.Name.MGLOfflinePackProgressChanged, object: nil)
                            
                            // Aqui, tentamos localizar o diretório onde os tiles estão armazenados
                            if let tilesDirectoryURL = getOfflineTilesDirectoryURL() {
                                // Compacta o diretório de tiles
                                do {
                                    let zipURL = try compressDirectoryToZip(directoryURL: tilesDirectoryURL)
                                    print("Arquivo ZIP criado em: \(zipURL.path)")
                                    if !hasResumed {
                                        hasResumed = true
                                        continuation.resume(returning: zipURL) // Resume com o URL zipado
                                    }
                                } catch {
                                    if !hasResumed {
                                        hasResumed = true
                                        continuation.resume(throwing: error)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }


    // Função para localizar o diretório de tiles offline (aproximada, dependendo da implementação do Mapbox)
    func getOfflineTilesDirectoryURL() -> URL? {
        // O Mapbox armazena os dados de tiles em um diretório de cache local, vamos tentar acessá-lo.
        // Em um caso real, você precisaria encontrar o caminho exato ou usar um mecanismo de busca no sistema.
        
        let fileManager = FileManager.default
        let cacheURL = fileManager.urls(for: .cachesDirectory, in: .userDomainMask).first
        let tilesDirectoryURL = cacheURL?.appendingPathComponent("com.mapbox.offline")
        return tilesDirectoryURL
    }

    // Função para compactar o diretório de tiles em um arquivo ZIP
    func compressDirectoryToZip(directoryURL: URL) throws -> URL {
        // Aqui você usaria uma biblioteca de compressão como o `Compression` ou uma solução personalizada
        // para compactar os dados do diretório em um arquivo ZIP.

        let zipURL = directoryURL.appendingPathComponent("map.zip")
        
        // Use a API para compactar o diretório de tiles em um arquivo ZIP
        // Você pode usar `FileManager` ou outras bibliotecas para fazer isso.
        // Por exemplo, você pode usar o `Compression` para compor o zip ou usar outras bibliotecas de terceiros.
        
        // Exemplo simples:
        // FileManager.default.zipDirectory(at: directoryURL, to: zipURL)
        
        return zipURL
    }
